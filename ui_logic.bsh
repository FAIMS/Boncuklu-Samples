/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

/*setSyncEnabled(true);
setFileSyncEnabled(true);*/

makeLocalID(){
    fetchOne("drop view if exists identifierAsSpreadsheet;");
    fetchOne("drop view if exists aentrelnaent;");
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from latestNonDeletedArchentIdentifiers group by uuid order by case attributename when 'Sample ID' then 1 when 'Sample Type' then 2 else attributename end;");
    fetchOne("create view aentrelnaent as select parent.uuid as parentuuid, parent.participatesverb as verb, child.uuid as uuid from (latestNonDeletedAentReln) parent join (latestNonDeletedAentReln join identifierAsSpreadsheet using (uuid)) child on (parent.relationshipid = child.relationshipid and parent.uuid != child.uuid) join latestNonDeletedRelationship using (relationshipid) join relntype using (relntypeid) order by relntimestamp desc");    
}




makeLocalID();
stage1_id = null;

/*** control ***/
onEvent("control/Home/New_Sample", "click", "newSample()");
onEvent("control/Home/Stage_1", "click", "showTabGroup(\"Stage_1\");");
onEvent("control/Home/Stage_2", "click", "showTabGroup(\"Heavy_Residue\");");
onEvent("control/Home/Stage_3", "click", "showTabGroup(\"Stage_3\");");

onEvent("control/Samples", "show", "refreshSamples()");
onEvent("control/Samples/Search", "click", "clearSearchSample()");
onEvent("control/Samples/Search_Button", "click", "searchSample();");
onEvent("control/Samples/Delete", "click", "sample_id = getFieldValue(\"control/Samples/Sample_DropDown\");deleteSample();");
onEvent("control/Samples/Load", "click", "sample_id=getFieldValue(\"control/Samples/Sample_DropDown\");loadSampleFrom(sample_id);");
onEvent("control/Samples/Sample_List", "click", "showSampleDetails();");

refreshSamples() {
    sample_id = null;
    searchSample();
}

clearSearchSample(){
    setFieldValue("control/Samples/Search","");
}

searchSample(){
    String searchType;
    if(!getFieldValue("control/Samples/Search_Type").equals("All")) {
        searchType = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue("control/Samples/Search_Type")+"';").get(0);    
    }
    ArrayList searchList = fetchAll("select uuid, aenttypename || ': ' || group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response " +
        "FROM (select * from latestNonDeletedArchentIdentifiers order by case attributename when 'Sample ID' then 1 when 'Sample Type' then 2 else attributename end ) " +
        "WHERE aenttypename = 'Sample'  " +
        "and uuid in (select uuid  " +
            "from  latestnondeletedarchent join aenttype using (aenttypeid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid) left outer join vocabulary using (vocabid)  " +
            "where ('" + getFieldValue("control/Samples/Search_Type") + "' = 'All'  " +
                "AND (freetext like '%"+getFieldValue("control/Samples/Search")+"%'  " +
                    "or vocabname like '%"+getFieldValue("control/Samples/Search")+"%'  " +
                    "or measure like '%"+getFieldValue("control/Samples/Search")+"%' ))" +
            "OR ('" + getFieldValue("control/Samples/Search_Type") + "' != 'All'  " +
                "AND coalesce(vocabname, freetext) = '" + searchType + "' " +
                "AND attributename = 'Sample Type' " +
                "AND (freetext like '%"+getFieldValue("control/Samples/Search")+"%' " +
                "or vocabname like '%"+getFieldValue("control/Samples/Search")+"%' " +
                "or measure like '%"+getFieldValue("control/Samples/Search")+"%' )))" +
        "GROUP BY uuid  " +
        "order by response; ");
    populateDropDown("control/Samples/Sample_DropDown", searchList);
    populateList("control/Samples/Sample_List", searchList);
}

loadSearchAttributes() {
    Object sampleTypes = makeVocab("Sample Type");
    ArrayList all = new ArrayList();
    all.add("All");
    all.add("All");
    sampleTypes.add(0,all);
    populateDropDown("control/Samples/Search_Type", sampleTypes);
}

showSampleDetails(){
    listID = getListItemValue();

    showToast(listID);
    
    foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response from ( " +
        "select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid)  " +        
        "where uuid = "+sample_id+")  " +
        "join latestnondeletedaentvalue using (uuid)  " +
        "join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid)  " +
        "where attributename in ('Sample ID', 'Sample Type')   " +
        "and coalesce(vocabname, freetext) is not null  " +
        
        "group by uuid, attributename  " +
        "order by case attributename when 'Sample ID' then 1 else attributename end);");
    if (!isNull(foo)){
        showToast(foo.get(0));  
    }
}

/*** Sample ***/
onEvent("Sample/Collected_Sample/Float", "delayclick", "saveSample(\"sample_id = getLastSavedRecordId();createFloat()\")");
onEvent("Sample/Collected_Sample/Wet_Sieve", "delayclick", "saveSample(\"sample_id = getLastSavedRecordId();createWetSieve()\")");
onEvent("Sample/Collected_Sample/Update_And_Close", "delayclick", "saveSample(\"cancelTabGroup(\\\"Sample\\\", false)\")");
onEvent("Sample/Collected_Sample/Update_And_New", "delayclick", "saveSample(\"newTabGroup(\\\"Sample\\\")\")");
onEvent("Sample/Collected_Sample/Update_And_Duplicate", "delayclick", "saveSample(\"setFieldValue(\\\"Sample/Collected_Sample/Sample_ID\\\",\\\"\\\");sample_id=null;\")");

onEvent("Sample/In_Progress","show","showSampleInProgress()");
onEvent("Stage_1/Stage_1/Sample_Processed", "click", "processSample();");
onEvent("Stage_1/Stage_1/Next_Sample", "click", "saveStage1(\"nextStage1();\")");
onEvent("Stage_1/Stage_1/Return_To_List", "click", "cancelTabGroup(\"Stage_1\",true);");
onEvent("Stage_1/Stage_1/Stage_2_Processing", "click", "showTabGroup(\"Heavy_Residue\");");



onEvent("Stage_2/Stage_2/Fraction_Processed", "click", "showToast(\"Marks this fraction as processed.\");");
onEvent("Stage_2/Stage_2/Return_To_List", "click", "showTabGroup(\"Heavy_Residue\");");
onEvent("Stage_2/Stage_2/Add_New_Fraction", "click", "showToast(\"Not sure what this one does.\");");
onEvent("Stage_2/Sorting/Add_Artefact", "click", "newArtefactGroup();");
onEvent("Stage_2/Sorting/Add_Special_Find", "click", "newSpecialFind();");

onEvent("Stage_3/Samples/Sort", "click", "showToast(\"Not sure what this one does.\");");

onEvent("Stage_1/Location", "show", "loadRelatedLocations(\"Stage_1\");");
onEvent("Stage_2/Location", "show", "loadRelatedLocations(\"Stage_2\");");
onEvent("Stage_1/Location/Add_Location", "delayclick", "saveStage1(\"addSampleLocation(\\\"Stage_1\\\");\");");
onEvent("Stage_2/Location/Add_Location", "delayclick", "saveSample(\"addSampleLocation(\\\"Stage_2\\\");\");");
onEvent("Stage_1/Location/Location_List", "click", "showLocationDetails();");
onEvent("Stage_2/Location/Location_List", "click", "showLocationDetails();");

onEvent("Stage_1/Stage_1/Update_And_Close", "delayclick", "saveStage1(\"cancelTabGroup(\\\"Stage_1\\\", false);\");");
onEvent("Stage_1/Stage_1/Update_And_New", "delayclick", "saveStage1(\"newSample();\");");
onEvent("Stage_1/Stage_1/Duplicate", "delayclick", "saveStage1(\"sample_id = null;\");");
onEvent("Stage_1/Stage_1/Delete", "click", "deleteStage1();");

onEvent("Sample/Processed", "show", "showSampleProccessed()");
nothingFound = fetchAll("select null, 'Nothing Found'");
onEvent("Sample/In_Progress/In_Progress_List", "click" ,"loadStage1FromList()");
onEvent("Sample/Processed/Processed_List", "click" ,"loadStage1FromList()");
onEvent("control", "load", "setSupervisor()");
onEvent("Stage_1", "show", "stage1CreatedModifiedBy()");

nextStage1(){
    if (!isNull(sample_id)){
    inProgress = fetchOne("select uuid, group_concat(response) from identifierAsSpreadsheet ias join aentrelnaent using (uuid) join latestnondeletedarchent using (uuid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid)  where parentuuid = "+sample_id+" and attributename = 'Date Processed' and freetext is null group by uuid order by aenttimestamp limit 1;");
    if (!isNull(inProgress)){
        showToast("Loading: "+ inProgress.get(1));
        stage1_id = inProgress.get(0);
        showTabGroup("Stage_1", stage1_id);

    } else {
        showToast("No other stage 1s");
    }

    }
    else {
        showToast( "No parent sample");
    }
}

deleteStage1(){
    showToast("TODO");
}

saveStage1(String callback){
    showToast("saving stage 1");
    if (!isNull(stage1_id)) {
        entity = fetchArchEnt(stage1_id);
    }
    saveTabGroup("Stage_1", stage1_id, null, null, "stage1_id = getLastSavedRecordId();" + callback);

}

stage1CreatedModifiedBy(){
    createdBy = fetchOne("select aenttimestamp, fname || ' ' || lname from archentity join user using (userid) where uuid = "+stage1_id+" group by uuid having min(aenttimestamp)");
    modifiedBy=fetchOne("select aenttimestamp, fname || ' ' || lname from archentity join user using (userid) where uuid = "+stage1_id+" group by uuid having max(aenttimestamp)");
    if (!isNull(createdBy) && !isNull(modifiedBy)){
        setFieldValue("Stage_1/Stage_1/Created_by", createdBy.get(1));
        setFieldValue("Stage_1/Stage_1/Created_date", createdBy.get(0));
        setFieldValue("Stage_1/Stage_1/Modified_by", modifiedBy.get(1));
        setFieldValue("Stage_1/Stage_1/Modified_date", modifiedBy.get(0));
    }
}

setSupervisor(){
    setFieldValue("control/Control/Supervisor", username);

}
loadStage1FromList(){
    loadingID = getListItemValue();
    if (!isNull(loadingID))
        stage1_id = loadingID;
        showTabGroup("Stage_1",stage1_id);
}
showSampleInProgress(){

    inProgressList = fetchAll("select uuid, group_concat(response) from identifierAsSpreadsheet ias join aentrelnaent using (uuid) join latestnondeletedarchent using (uuid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid)  where parentuuid = "+sample_id+" and attributename = 'Date Processed' and freetext is null group by uuid;");
    if (!isNull(inProgressList))
        populateList("Sample/In_Progress/In_Progress_List", inProgressList);
    else
        populateList("Sample/In_Progress/In_Progress_List", nothingFound);
}

showSampleProccessed(){


    processedList = fetchAll("select uuid, group_concat(response) from identifierAsSpreadsheet ias join aentrelnaent using (uuid) join latestnondeletedarchent using (uuid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid)  where parentuuid = "+sample_id+" and attributename = 'Date Processed' and freetext is not null group by uuid;");
    if (!isNull(processedList))
        populateList("Sample/Processed/Processed_List", processedList);
    else
        populateList("Sample/Processed/Processed_List", nothingFound);
    
}

createFloat() {

    sample_id = getLastSavedRecordId();
    float_id = null;
/*
1) save
2) Create two sample records:
    Record 1:
        Collected Sample parent, float child.
        setfieldvalue sample_type: float
        special number: FLOT1400 (make decimal entry)
        write sample_id and collection date from collected sample to this.
            ask penny: context id?
        save float
    Record 2:
        Collected Sample parent, heavy residue child.
        setfieldvalue sample_type: heavy residue
        special number: HR1400 (make decimal entry)
        saves heavy residue
        write sample_id and collection date from collected sample to this.
    Shows tabgroup stage_1 (with record 1 from above)

//create float

/*
attributes = createAttributeList();
name = "name";
text = "some text";
vocab = null;
measure = null;
certainty = null;
attributes.add(createEntityAttribute(name, text, vocab, measure, certainty));
entity_id = saveArchEnt(null, "small", null, attributes);
*/

    attributes = createAttributeList();


    attributes.add(createEntityAttribute("Sample ID", "FLOT1400", null, null, null));
    sampleTypeAttr = fetchOne("select vocabid from vocabulary where vocabname = '{Flot_Sample}'");
    if (isNull(sampleTypeAttr)){
        showToast("couldn't find float!");
        return;
    }
    attributes.add(createEntityAttribute("Sample Type", null, sampleTypeAttr.get(0), null, null));
    parentSampleID = getFieldValue("Sample/Collected_Sample/Sample_ID");
    attributes.add(createEntityAttribute("Parent Sample", parentSampleID, null, null, null));
    parentCollectedDate = getFieldValue("Sample/Collected_Sample/Date_Collected");
    attributes.add(createEntityAttribute("Date Collected", parentCollectedDate, null, null, null));
    contextIDAttr = getFieldValue("Sample/Collected_Sample/Context_ID");
    attributes.add(createEntityAttribute("Context ID", contextIDAttr, null, null, null));
    float_id = saveArchEnt(null, "Sample", null, attributes);

    saveEntitiesToHierRel("Split", sample_id, float_id, "Split From", "Split To");



    attributes = createAttributeList();
    residue_id=null;

    attributes.add(createEntityAttribute("Sample ID", "HR1400", null, null, null));
    sampleTypeAttr = fetchOne("select vocabid from vocabulary where vocabname = '{Heavy_Residue}'");
    if (isNull(sampleTypeAttr)){
        showToast("couldn't find residue!");
        return;
    }
    attributes.add(createEntityAttribute("Sample Type", null, sampleTypeAttr.get(0), null, null));
    parentSampleID = getFieldValue("Sample/Collected_Sample/Sample_ID");
    attributes.add(createEntityAttribute("Parent Sample", parentSampleID, null, null, null));
    parentCollectedDate = getFieldValue("Sample/Collected_Sample/Date_Collected");
    attributes.add(createEntityAttribute("Date Collected", parentCollectedDate, null, null, null));
    contextIDAttr = getFieldValue("Sample/Collected_Sample/Context_ID");
    attributes.add(createEntityAttribute("Context ID", contextIDAttr, null, null, null));
    residue_id = saveArchEnt(null, "Sample", null, attributes);

    saveEntitiesToHierRel("Split", sample_id, residue_id, "Split To", "Split From");
    stage1_id = float_id;
    showTabGroup("Stage_1", stage1_id);

// also context id



}


/*


Location tab, on Stage 1, Stage 2 proccessed, Stage 3

    Make sure it works.
    Add dropdown of locations, with delete button on right
    List needs to populate on bottom.



-- Add "Fractionated" to sample type list


Tabgroup: Heavy Residue
-- Rename: Stage 2 Search 

-- Heavy Residue: create dropdown of all heavy residues (which match search criteria)
-- populate that list with all heavy residues
-- Remove proccess fractions button
-- Add dropdown, 

wire in delete, load, point to stage 2 proccessing tab.

*/


stage2_id = null;
onEvent("Heavy_Residue/Heavy_Residue", "show", "stage2SearchTrunc()");
onEvent("Heavy_Residue/Heavy_Residue/Search_Button", "click", "stage2Search()");


stage2Search(){

 ArrayList searchList = fetchAll("select uuid, group_concat(response) " +
        "FROM identifierAsSpreadsheet "+
        "WHERE uuid in ( "+
                        " Select uuid from latestnondeletedaentvalue join attributekey using (attributeid) join vocabulary using (vocabid, attributeid) where attributename = 'Sample Type' and vocabname = '{Heavy_Residue}' limit 10 "+
                        ") "+
        "and uuid in ( select uuid from latestnondeletedaentvalue left outer join vocabulary using (vocabid) where freetext like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%' or vocabname like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%' or measure like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%' ) "+
        " group by uuid");

    populateDropDown("Heavy_Residue/Heavy_Residue/Heavy_Residue_Drop", searchList);
    populateList("Heavy_Residue/Heavy_Residue/Heavy_Residue_List", searchList);
   

}

stage2SearchTrunc(){

     ArrayList searchList = fetchAll("select uuid, group_concat(response) " +
        "FROM identifierAsSpreadsheet "+
        "WHERE uuid in ( "+
                        " Select uuid from latestnondeletedaentvalue join attributekey using (attributeid) join vocabulary using (vocabid, attributeid) where attributename = 'Sample Type' and vocabname = '{Heavy_Residue}' limit 10 "+
                        ") group by uuid");

/*


        "WHERE aenttypename = 'Sample'  " +
        "and uuid in (select uuid  " +
            "from  latestnondeletedarchent join aenttype using (aenttypeid) join idealaent using (aenttypeid) join attributekey using (attributeid) left outer join latestnondeletedaentvalue using (uuid, attributeid) left outer join vocabulary using (vocabid)  " +
            "where 
                    freetext like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%'  " +
                    "or vocabname like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%'  " +
                    "or measure like '%"+getFieldValue("Heavy_Residue/Heavy_Residue/Search")+"%' " +
           
        "GROUP BY uuid  " +
        "order by response; ");*/
    populateDropDown("Heavy_Residue/Heavy_Residue/Heavy_Residue_Drop", searchList);
    populateList("Heavy_Residue/Heavy_Residue/Heavy_Residue_List", searchList);

}

onEvent("Heavy_Residue/Processed" , "show", "stage2Proccessed()");

/*
Proccessed: all heavy residue which have a proccessed date and at least one split-to relationship.
In progress: all heavy residue which have a proccessed date and no split-to relationships.
*/

stage2Proccessed(){


//TODO Brian double-check that the split-to checking works.
    processedList = fetchAll("select uuid, group_concat(response) " +
        "FROM identifierAsSpreadsheet "+
        "WHERE uuid in ( "+
                        " select uuid from aentrelnaent "+
                        " where parentuuid in (Select uuid from latestnondeletedaentvalue join attributekey using (attributeid) join vocabulary using (vocabid, attributeid) where attributename = 'Sample Type' and vocabname = '{Heavy_Residue}' )"+
                           "and parentuuid in ( select uuid from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Date Proccessed' and freetext is not null ) " + 
                           "and verb = 'Split From' ) "+
        "group by uuid");




    if (!isNull(processedList))
        populateList("Heavy_Residue/Processed/Processed_List", processedList);
    else
        populateList("Heavy_Residue/Processed/Processed_List", nothingFound);
}
onEvent("Heavy_Residue/In_Progress" , "show", "stage2InProccess()");

stage2InProccess(){
    

     inProgressList = fetchAll("select uuid, group_concat(response) " +
        "FROM identifierAsSpreadsheet "+
        "WHERE uuid in ( "+
                        " Select uuid from latestnondeletedaentvalue join attributekey using (attributeid) join vocabulary using (vocabid, attributeid) where attributename = 'Sample Type' and vocabname = '{Heavy_Residue}'  "+
                        ") "+
            "and uuid in ( "+
                        " select uuid from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Date Proccessed' and freetext is not null " +
                        ") " + 
            "and uuid not in ( "+
                        " select uuid from aentrelnaent where parentuuid in ( "+
                            " Select uuid from latestnondeletedaentvalue join attributekey using (attributeid) join vocabulary using (vocabid, attributeid) where attributename = 'Sample Type' and vocabname = '{Heavy_Residue}' "+
                            ") and parentuuid in ( "+
                            " select uuid from latestnondeletedaentvalue join attributekey using (attributeid) where attributename = 'Date Proccessed' and freetext is not null " + 
                        ") and verb = 'Split From' "+
                        ") group by uuid");
    if (!isNull(inProgressList))
        populateList("Heavy_Residue/In_Progress/In_Progress_List", inProgressList);
    else
        populateList("Heavy_Residue/In_Progress/In_Progress_List", nothingFound);
}

/*


Load takes us to "new" stage 2 process (to create)


Stage 2 process tabgroup:
    Tabs:
        Heavy Residue sample
            Read only:
                Sample ID
                Volume
                Comment
                Date Proccessed
                Supervisor
                Created/Modified

            Triggers:
                Edit (low priority)
                    Load stage 1 tab group with appropriate collected sample parent
                Proccess Fraction
                    + Checklist above trigger
                        Checklist has (defined in ui):
                            4, >4mm
                            2, >2mm
                            1, >1mm
                            0.5, >0.5mm
                    Check to make sure at least one thing checked.
                        Create samples for each checked item
                        Sample ID: $ParentSampleID-{4,2,1,0.5}
                        Sample Type: Fractionated
                        Parent Sample ID: Heavy residue sample
                        Fraction size: Based on checkbox
                        Collection Date:
                        Context ID:
                    Load Stage 3 tabgroup
                        With first created record in order above.

                Return To List
                    canceltabgroup

        Processed
        In Progress
        Location


Stage 3 Proccess
    To create

    Tab: Sample Fraction
        SampleID (as populated by record creation)
        Fraction Size
        Volume
        Weight
        Comment
        Destination
            Populate dropdown
        Percentage of Sample
        
        Proccess Date
        Supervisor
        Context ID


        Trigger:
            Fraction Process
                Mimics sample proccessed
                It writes localtimetimstamp and supervisor as set in control to procces date  and supervisor
            REturn to sample list
                show stage 2 proccess tab group
            Duplicate 

    Tab: Sorting. Split into artefact group list tab and special find list tab
    
        Trigger: Add Artefact
            Save an artefact group record
                Context Id (inherited)
                split to/from parent sample
                Parent sample ID (inherit)



            Showtabgroup Artefact group of recorded
        List
            all related artefacts

        Trigger :Add Special Find
            As per artefact.
        List
            all related special finds


    Tab: Location

Stage 3 
    Rename: Stage 4 search

    Samples
        Rename: Search

        Dropdown/list populated by all fractionated heavy residue samples which have a destiation attribute sort.

        Load/delete
        
    To Sort
        List populated by all fractionated heavy residue samples which have a destiation attribute sort which have no split-to children artefact groups/special finds.
    Sorted
        List populated by all fractionated heavy residue samples which have a destiation attribute sort which have one or more split-to children artefact groups/special finds.



Artefact Group
    Add attributes:
        Parent Sample ID

when proccess fractions is pressed:

create a new record
    Heavy Residue is parent
    Write heavy residue ID as parent sample
    copy collection date from heavy residue.
    Type: Fractionated


        


*/



createWetSieve(){
    /* 
    Called from collected sample 

1) save
2) Create two sample records:
    Record 1:
        Collected Sample parent, wet sieve child.
        setfieldvalue sample_type: wet sieve
        special number: WS1400 (make decimal entry)
        write sample_id and collection date from collected sample to this.
        save wet sieve
    Record 2:
        Collected Sample parent, heavy residue child.
        setfieldvalue sample_type: heavy residue
        special number: HR1400 (make decimal entry)
        write sample_id and collection date from collected sample to this.
        saves heavy residue
        
    Shows tabgroup stage_1 (with record 1 from above)    
*/


    
    wetSieve_id = null;

    attributes = createAttributeList();


    attributes.add(createEntityAttribute("Sample ID", "WS1400", null, null, null));
    sampleTypeAttr = fetchOne("select vocabid from vocabulary where vocabname = '{Wet_Sieve}'");
    if (isNull(sampleTypeAttr)){
        showToast("couldn't find wet sieve!");
        return;
    }
    attributes.add(createEntityAttribute("Sample Type", null, sampleTypeAttr.get(0), null, null));
    parentSampleID = getFieldValue("Sample/Collected_Sample/Sample_ID");
    attributes.add(createEntityAttribute("Parent Sample", parentSampleID, null, null, null));
    parentCollectedDate = getFieldValue("Sample/Collected_Sample/Date_Collected");
    attributes.add(createEntityAttribute("Date Collected", parentCollectedDate, null, null, null));
    contextIDAttr = getFieldValue("Sample/Collected_Sample/Context_ID");
    attributes.add(createEntityAttribute("Context ID", contextIDAttr, null, null, null));
    wetSieve_id = saveArchEnt(null, "Sample", null, attributes);

    saveEntitiesToHierRel("Split", sample_id, wetSieve_id, "Split From", "Split To");



    attributes = createAttributeList();
    residue_id=null;

    attributes.add(createEntityAttribute("Sample ID", "HR1400", null, null, null));
    sampleTypeAttr = fetchOne("select vocabid from vocabulary where vocabname = '{Heavy_Residue}'");
    if (isNull(sampleTypeAttr)){
        showToast("couldn't find residue!");
        return;
    }
    attributes.add(createEntityAttribute("Sample Type", null, sampleTypeAttr.get(0), null, null));
    parentSampleID = getFieldValue("Sample/Collected_Sample/Sample_ID");
    attributes.add(createEntityAttribute("Parent Sample", parentSampleID, null, null, null));
    parentCollectedDate = getFieldValue("Sample/Collected_Sample/Date_Collected");
    attributes.add(createEntityAttribute("Date Collected", parentCollectedDate, null, null, null));
    contextIDAttr = getFieldValue("Sample/Collected_Sample/Context_ID");
    attributes.add(createEntityAttribute("Context ID", contextIDAttr, null, null, null));
    residue_id = saveArchEnt(null, "Sample", null, attributes);

    saveEntitiesToHierRel("Split", sample_id, residue_id, "Split To", "Split From");
    stage1_id = wetSieve_id;
    showTabGroup("Stage_1", stage1_id);
}






String sample_id = null;

newSample(){
    sample_id = null;
    newTabGroup("Sample");

    date = fetchOne("select datetime(CURRENT_TIMESTAMP, 'localtime')");
    setFieldValue("Sample/Collected_Sample/Site_Code","BK" + date.get(0).charAt(2) + date.get(0).charAt(3));
    setFieldValue("Sample/Collected_Sample/Created_by", username);
    setFieldValue("Sample/Collected_Sample/Created_date", date.get(0));
    setFieldValue("Sample/Collected_Sample/Modified_by", username);
    setFieldValue("Sample/Collected_Sample/Modified_date", date.get(0));
}

loadSampleFrom(archent_id) {
    sample_id = archent_id;
    if (isNull(sample_id)) {
        showToast("No Sample selected");
        return;
    }
    showTabGroup("Sample", sample_id);
    Object foo = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+sample_id+"' group by uuid having min(aenttimestamp)");
    setFieldValue("Sample/Collected_Sample/Created_by", foo.get(0));
    Object bar = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+sample_id+"' group by uuid having min(aenttimestamp);");
    setFieldValue("Sample/Collected_Sample/Created_date", bar.get(1));

    Object foo2 = fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+sample_id+"' group by uuid having max(aenttimestamp)");
    setFieldValue("Sample/Collected_Sample/Modified_by", foo2.get(0));
    Object bar2 = fetchOne("select uuid, datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+sample_id+"' group by uuid having max(aenttimestamp);");
    setFieldValue("Sample/Collected_Sample/Modified_date", bar2.get(1));
}

loadSample(archent_id) {
    sample_id = getListItemValue();
    loadSampleFrom(sample_id);
}

saveSample(String callback) {
    // if (isNull(getFieldValue("Sample/Sample_GeneralInformation/Sample_ID"))) {
    //     showWarning("Logic Error", "Cannot save record without id");
    //     return;
    // }
    showToast("saving *sample*");
    if (!isNull(sample_id)) {
        entity = fetchArchEnt(sample_id);
    }
    saveTabGroup("Sample", sample_id, null, null, "sample_id = getLastSavedRecordId();" + callback);
}

deleteSample() {
    if (!isNull(sample_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Sample!", "reallyDeleteSample()", "doNotDelete()");
    } else {
         cancelTabGroup("Sample", true);
    }
}

reallyDeleteSample() {
    deleteArchEnt(sample_id);
    showTabGroup("Sample");
    cancelTabGroup("Sample", false);
}

loadSampleAttributes(){
    populateDropDown("Sample/Collected_Sample/Sample_Type", makeVocab("Sample Type"));
    populateDropDown("Stage_1/Stage_1/Sample_Type", makeVocab("Sample Type"));
    populateDropDown("Stage_2/Stage_2/Fraction_Size", makeVocab("Sample Type"));
    populateDropDown("Stage_2/Stage_2/Destination", makeVocab("Destination"));
    populateDropDown("Stage_1/Location/Location", makeVocab("Location"));
    populateDropDown("Stage_2/Location/Location", makeVocab("Location"));
}

addSampleLocation(String stage) {
    Object foo = fetchOne("select vocabName from vocabulary where vocabid = '"+getFieldValue(stage + "/Location/Location")+"';");   
    if(foo.get(0).equals("{0No_Observation}")) {
        showToast("Please select a valid location.");
        return;
    }

    if(foo.get(0).equals("{zOther_Location}") && isNull(getFieldValue(stage + "/Location/Location_Note"))) {
        showToast("Please fill in the Location Note.");
        return;
    }

    String sample_location_id = null;

    List attributes = createAttributeList();
    attributes.add(createEntityAttribute("Sample ID", getFieldValue(stage + "/" + stage + "/Sample_ID"), null, null, null));
    attributes.add(createEntityAttribute("Location", null, getFieldValue(stage + "/Location/Location"), null, null));
    attributes.add(createEntityAttribute("Location Note", getFieldValue(stage + "/Location/Location_Note"), null, null, null));
    saveArchEnt(sample_location_id, "Sample Location", null, attributes);
    sample_location_id = getLastSavedRecordId();
    saveEntitiesToRel("Location", sample_id, sample_location_id);
    loadRelatedLocations(stage);
}

showLocationDetails() {
    String sample_location_id = getListItemValue();
    
    foo = fetchOne("select group_concat(response, '\n') from ( select attributename || ': ' || coalesce(vocabname, freetext) as response " +
        "from (select uuid from latestnondeletedarchent join latestnondeletedaentreln using (uuid) where uuid = "+sample_location_id+") " +
        "join latestnondeletedaentvalue using (uuid) join attributekey using (attributeid) left outer join vocabulary using (attributeid, vocabid) " +
            "where attributename in ('Location', 'Location Note')  " +
                "and coalesce(vocabname, freetext) is not null " +
        "group by uuid, attributename " +
        "order by case attributename when 'Location' then 1 when 'Location Note' then 2 end); ");
    if (!isNull(foo)){
        showToast(foo.get(0));
    }
}

loadRelatedLocations(String stage) {
    Object locations = new ArrayList();
    if (!isNull(sample_id)){
        locations = fetchAll("select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' | ') as response, valuetimestamp\n"+
            "  FROM (  SELECT uuid, attributeid, vocabid, attributename, vocabname, measure, freetext, certainty, attributetype, valuetimestamp, aenttypename\n"+
            "            FROM latestNonDeletedArchentIdentifiers\n"+
            "           WHERE aenttypename = 'Sample Location'\n"+
            "             AND uuid in (select uuid\n"+
            "                            FROM latestNonDeletedAentReln\n"+
            "                           where relationshipid in (select relationshipid\n"+
            "                                                      FROM latestNonDeletedAentReln\n"+
            "                                                      JOIN relationship using (relationshipid)\n"+
            "                                                      JOIN relntype using (relntypeid)\n"+
            "                                                     where uuid = "+sample_id+"\n"+
            "                                                       and relntypeName = 'Location')\n"+
            "                             and uuid != "+sample_id+")\n"+
            "        ORDER BY uuid, attributename ASC)\n"+
            "group by uuid\n"+
            "order by valuetimestamp desc, uuid, attributename;");
    }
    populateList(stage + "/Location/Location_List",  locations);
}

processSample() {
    date = fetchOne("select datetime(CURRENT_TIMESTAMP, 'localtime')");
    setFieldValue("Stage_1/Stage_1/Supervisor", getFieldValue("control/Control/Supervisor"));
    setFieldValue("Stage_1/Stage_1/Processed_Date", date.get(0));
}

/*** Artefact Group ***/
onEvent("Artefact_Group/Artefact_Group/attachPhoto", "click", "attachPictureTo(\"Artefact_Group/Artefact_Group/Photo\")");
onEvent("Artefact_Group/Artefact_Group/attachAudio", "click", "attachAudioTo(\"Artefact_Group/Artefact_Group/Audio\")");
onEvent("Artefact_Group/Artefact_Group/attachVideo", "click", "attachVideoTo(\"Artefact_Group/Artefact_Group/Video\")");
onEvent("Artefact_Group/Artefact_Group/attachSketch", "click", "attachFileTo(\"Artefact_Group/Artefact_Group/Sketch\")");
onEvent("Artefact_Group/Artefact_Group/viewattached", "click", "viewArchEntAttachedFiles(artefact_group_id)");
onEvent("Artefact_Group/Artefact_Group/Update", "delayclick", "saveArtefactGroup(\"\")");
onEvent("Artefact_Group/Artefact_Group/SaveAndNew", "delayclick", "saveArtefactGroup(\"newArtefactGroup();\")");
onEvent("Artefact_Group/Artefact_Group/Duplicate", "delayclick", "saveArtefactGroup(\"artefact_group_id = null;\")");
onEvent("Artefact_Group/Artefact_Group/Delete", "delayclick", "deleteArtefactGroup()");

String artefact_group_id = null;

newArtefactGroup(){
    artefact_group_id = null;
    newTabGroup("Artefact_Group");
}

loadArtefactGroup() {
    artefact_group_id = getListItemValue();
    loadArtefactGroupFrom(artefact_group_id);
}

loadArtefactGroupFrom(archent_id) {
    artefact_group_id = archent_id;
    if (isNull(artefact_group_id)) {
        showToast("No Artefact Group selected");
        return;
    }
    showTabGroup("Artefact_Group", artefact_group_id);
}

saveArtefactGroup(String callback) {
    if (isNull(getFieldValue("Artefact_Group/Artefact_Group/Artefact_Group_ID"))) {
        showWarning("Validation Error", "Cannot save record without id");
        return;
    }
    if (!isNull(artefact_group_id)) {
        entity = fetchArchEnt(artefact_group_id);
    }

    saveTabGroup("Artefact_Group", artefact_group_id, null, null, "artefact_group_id = getLastSavedRecordId();" + callback);
}

deleteArtefactGroup(){
    if (!isNull(artefact_group_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Artefact Group!", "reallyDeleteArtefactGroup()", "doNotDelete()");
    } else {
        cancelTabGroup("Artefact_Group", true);
    }
}

reallyDeleteArtefactGroup(){
    deleteArchEnt(artefact_group_id);
    showTabGroup("Artefact_Group");
    cancelTabGroup("Artefact_Group", false);
}

loadArtefactGroupAttributes() {
    populateHierarchicalDropDown("Artefact_Group/Artefact_Group/Artefact_Class", "Artefact Class");
}

/*** Special Find ***/
onEvent("Special_Find/Special_Find/attachPhoto", "click", "attachPictureTo(\"Special_Find/Special_Find/Photo\")");
onEvent("Special_Find/Special_Find/attachAudio", "click", "attachAudioTo(\"Special_Find/Special_Find/Audio\")");
onEvent("Special_Find/Special_Find/attachVideo", "click", "attachVideoTo(\"Special_Find/Special_Find/Video\")");
onEvent("Special_Find/Special_Find/Update", "delayclick", "saveSpecialFind(\"\")");
onEvent("Special_Find/Special_Find/Duplicate", "delayclick", "saveSpecialFind(\"special_find_id = null\")");
onEvent("Special_Find/Special_Find/SaveAndNew", "delayclick", "saveSpecialFind(\"newSpecialFind()\")");
onEvent("Special_Find/Special_Find/Delete", "delayclick", "deleteSpecialFind()");

String special_find_id = null;

newSpecialFind(){
    special_find_id = null;
    newTabGroup("Special_Find");
}

loadSpecialFind() {
    special_find_id = getListItemValue();
    if (isNull(special_find_id)) {
        showToast("No Special Find selected.");
        return;
    }
    showTabGroup("Special_Find", special_find_id);
}

loadSpecialFindFrom(archent_id) {
    special_find_id = archent_id;
    if (isNull(special_find_id)) return;
    showTabGroup("Special_Find", special_find_id);
}

saveSpecialFind(String callback) {
    if (isNull(getFieldValue("Special_Find/Special_Find/Special_Find_ID"))) {
        showWarning("Logic Error", "Cannot save record without id");
        return;
    }
    
    if (!isNull(special_find_id)) {
        entity = fetchArchEnt(special_find_id);
    }

    saveTabGroup("Special_Find", special_find_id, null, null, "special_find_id = getLastSavedRecordId();" + callback);
}

deleteSpecialFind(){
    if (!isNull(special_find_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Special Find!", "reallyDeleteSpecialFind()", "doNotDelete()");
    } else {
        cancelTabGroup("Special_Find", true);
    }
}

reallyDeleteSpecialFind(){
    deleteArchEnt(special_find_id);
    showTabGroup("Special_Find");
    cancelTabGroup("Special_Find", false);
}

loadSpecialFindAttributes(){
    populateHierarchicalDropDown("Special_Find/Special_Find/Special_Find_Class", "Special Find Class");
}

/*** MISC ***/

saveEntitiesToRel(type, entity1, entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, null);
    addReln(entity2, rel_id, null);
}

saveEntitiesToHierRel(type, entity1, entity2, e1verb, e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    
    rel_id = saveRel(null, type, null, null);
    addReln(entity1, rel_id, e1verb);
    addReln(entity2, rel_id, e2verb);
}

makeVocab(String attrib){
    Object a = fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' ");
    return a;
}

makePictureGallery(String attrib){
    fetchAll("select vocabid, vocabname, pictureurl from vocabulary left join attributekey using (attributeid) where attributename = '" + attrib + "' order by vocabname;");
}

doNotDelete(){
    showToast("Delete Cancelled.");
}

/*** USER ***/

getDefaultUsersList() {
    users = fetchAll("select userid, fname ||' ' || lname from user");
    return users;
}

populateListForUsers(){
    populateList("user/usertab/users", getDefaultUsersList());
}

populateListForUsers();

String username = "";
String device = "";

login() {
    Object userResult = fetchOne("select userid,fname,lname,email from user where userid='" + getListItemValue() + "';");
    User user = new User(userResult.get(0),userResult.get(1),userResult.get(2),userResult.get(3));
    userid = userResult.get(0);
    setUser(user);
    username = userResult.get(1) + " " + userResult.get(2);
    showTabGroup("control");
}

onEvent("user/usertab/users", "click", "login()");

/*** SYNC ***/

onEvent("control/Control/startsync", "click", "startSync()");
onEvent("control/Control/stopsync", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

// Stuff that needs to happen after everything.
loadSearchAttributes();
loadArtefactGroupAttributes();
loadSampleAttributes();
loadSpecialFindAttributes();